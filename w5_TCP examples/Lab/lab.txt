Description
	Please implement a TCP server that behaves like ncat -p <port-number> -nkle /path/to/an/external/program. You may play it with a sample command ncat -p 11111 -nlke `which date` . Once you have invoked it successfully, you can connect to the local server at port 11111 using the command nc localhost 11111. It would behave like a daytime TCP server.
	Your program has to accept multiple arguments. Suppose your program is named nkat, the command argument format is: ./nkat <port-numner> /path/to/an/external/program [optional arguments ...]. For example, using your program to invoke exactly the same command as ncat is ./nkat 11111 `which date` .
	Your program should show a message like New connection from <client ip>:<port> for each new connection.
	Your program should show an error message when the command execution is failed. Note that you should not send the error message to the client.
	Once you have complete your implementation, you can test your program by following the steps presented in the Demonstration section.
	
Demonstration
	Suppose your program is named nkat. We will run your program listening on the same port number (11111). Once your server runs, connect to port 11111 from a local client using the command nc localhost 11111. You should run the nc command multiple times to ensure your server works consistently.
	
[10%] Run the server using the command ./nkat 11111 `which date` .
[20%] Run the server using the command ./nkat 11111 date.
[20%] Run the server using the command ./nkat 11111 /path/to/an/invalid/executable. Your server should handle errors appropriately.
[20%] Run the server using the command ./nkat 11111 ls -la /tmp /home /xxx.
[20%] Run the server using the command ./nkat 11111 timeout 60 /bin/bash -c 'cd /; exec bash'. Your server should handle multiple concurrent clients appropriately.
[10%] Your program can not produce zombie processes in any test cases.
