[Lab 1]
Description
	Play with the server manually using the command nc inp111.zoolab.org 10002.
	Implement your program to interact with the server. You may follow the instructions in the Demonstration section.

Demonstration
	Your program should request the server to start sending data using the GO command
	Your program should count how many bytes of data（alphabets and digits）are enclosed in the two lines ==== BEGIN DATA ==== and ==== END DATA ==== received from the server. You do not need to count the data bytes for the two lines.
	Your program should answer the question requested by the server.
	Please print out the last message you received from the server after sending the answer to the server.

[Lab 2]
Description
	Play with the server manually using the command nc inp111.zoolab.org 10003.
	The server is a sink server that drops everything you send to the server.
	Write a program to interact with the server. After receiving the first message from the server, your program should start sending data to the server until your program is terminated by the user.
	Your program must control the data sending rate to the server, which is passed to your program via the first argument (in a unit of megabyte-per-second)

Demonstration
	Run Wireshark on your host machine. Select the interface you used to connect to the Internet and start capturing packets. You can use a Wireshark filter tcp.dstport == 10003 (or tcpdump filter tcp and dst port 10003) to capture packets. A sample Wireshark startup screenshot is shown below.
	After you start capturing packets, activate the “I/O Graphs” window. It can be activated via the menu “Statistics” -> “I/O Graphs”. You should add a new line that plots byte-per-second numbers for the filtered traffic. Note that the default settings for a line plot packet-per-second numbers. You should change it manually by yourself. You may look at the sample figure below to see how it should be appropriately configured.
	Suppose the program you implemented is tcpcbr and the first argument is the expected constant bitrate configured to send data. You can test your implementation with the following shell script.
	Check the “I/O Graphs” window to ensure that your program sends at the bitrate we expected. For your reference, a sample screenshot for the “I/O Graphs” window is shown below.
	
	You get 100% of the points if your program sends precisely at the expected bitrate, just like the sample figure shown above.
	You get 95% of the points if your program sends at a rate within ±0.1 MBps of the expected bitrate.
	You get 90% of the points if your program sends at a rate within ±0.3 MBps of the expected bitrate.
	You get 80% of the points if your program sends at a rate within ±0.6 MBps of the expected bitrate.
	Well, if you can send data to the server consistently at any rate higher than 1 MBps, you get 60% of the points.
